import (
	"std.um"
	
	"src/build.um"
	"src/common.um"
	"src/init.um"
	"src/run.um"
	"src/update.um"

	"umbox/args/args.um"
	"umbox/filepath/filepath.um"
)

fn main() {
	args := args::mk("UmBox", "v1.4", "an Umka package manager", args::stdargv())

	args.optional(&common::debugMode, "debug", "Enable debug mode").short('d')
	args.optional(&common::serverUrl, "url", "Specify server URL").short('u')
	args.help()

	if args.mode("init", "Initialize a box") {
		path := ""
		preset := ""
		args.optionalNext(&path, "path")
		args.check()
		common::exitif(init::run(path))
	} else if args.mode("run", "Run a command inside the UmBox env") {
		cmd := []str{}
		args.optionalNext(&cmd, "command")
		args.check()
		common::exitif(run::run(cmd))
	} else if args.mode("build", "Build the box") {
		outPath := "out"
		params := build::Params{}
		args.optional(&outPath, "output", "Specify output directory/archive").short('o')
		args.optional(&params.platformTag, "plat", "Include platform tags in UMI names")
		args.optional(&params.winCross, "win-cross", "Cross compile for Windows")
		args.check()
		common::exitif(build::run(build::DirOutput{outPath}, params))
	} else if args.mode("update", "Update packages from git source") {
		args.check()
		common::exitif(update::run())
	} else {
		args.usage()
	}
}
