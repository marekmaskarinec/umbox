
import (
	"std.um"
	"../umbox/http/http.um"
	"../umbox/json/json.um"
	"../umbox/jsonenc/jsonenc.um"
	"../umbox/os/os.um"
	"../umbox/strings/strings.um"
	"../umbox/tar/tar.um"
)

type ErrCode* = enum {
	ok
	failed
	cli
	secret
	box
	request
	json
	boxNotFound
	fileNotFound
	jsonKeyNotFound
	preBuild
	postBuild
	dirNotEmpty
}

const errStrings = [13]str{
	"not an error",
	"failed",
	"invalid cli arguments",
	"bad token",
	"invalid box syntax",
	"HTTP request failed",
	"json error",
	"box not found",
	"file not found",
	"json key not found",
	"pre build failed",
	"post build failed",
	"directory not empty"
}

fn error*(ec: ErrCode, msg: str = ""): std::Err {
	e := std::error(int(ec), errStrings[int(ec)], "umbox")
	if msg != "" {
		e.msg += ": " + msg
	}
	return e
}

var serverUrl*: str = "https://umbox.tophat2d.dev/"
var debugMode*: bool = false

fn exitif*(e: std::Err) {
	if e.code == 0 {
		return
	}

	if debugMode {
		std::exitif(e)
	}

	fprintf(std::stderr(), "UmBox error (%d): %s\n", e.code, e.msg)
	exit(1)
}

type Box* = interface {
	exists(file: str = "version"): bool
	download(file: str = "box.tar"): ([]char, std::Err)
	encode(): str
	getName(): str
}

type HTTPBox* = struct {
	name: str
	url: str
}

fn (b: ^HTTPBox) getName*(): str {
	return b.name
}

fn (b: ^HTTPBox) exists*(file: str = "version"): bool {
	if debugMode {
		printf("CHECK %s/%s@%s\n", b.name, file, b.url)
	}

	resp := http::get(sprintf("%s/api/package/%s/download/%s", b.url, b.name, file), {
		userAgent: "umbox-cli"
	})

	return resp.ok && resp.status == 200
}

fn (b: ^HTTPBox) download*(file: str = "box.tar"): ([]char, std::Err) {
	if debugMode {
		printf("DL %s/%s@%s\n", b.name, file, b.url)
	}

	resp := http::get(sprintf("%s/api/package/%s/download/%s", b.url, b.name, file), {
		userAgent: "umbox-cli"
	})

	if !resp.ok {
		return {}, error(.request, resp.err)
	}

	if resp.status != 200 {
		return resp.body, error(.request, resp.body)
	}

	return resp.body, {}
}

fn (b: ^HTTPBox) encode*(): str {
	if b.url != serverUrl {
		return sprintf("%s@%s", b.name, b.url)
	}
	
	return b.name
}

type FileBox* = struct {
	name: str
	path: str
	handle: tar::Tar
}

fn (b: ^FileBox) open(): std::Err {
	var err: std::Err
	b.handle, err = tar::open(b.path, "rb")

	return err
}

fn (b: ^FileBox) getName*(): str {
	return b.name
}

fn (b: ^FileBox) exists*(file: str = "version"): bool {
	if file == "version" {
		return os::isfile(b.path)
	}

	if b.handle._ == null {
		if err := b.open(); err.code != 0 {
			return false
		}
	}
	
	dat, err := b.handle.read(file)
	return err.code == 0
}

fn (b: ^FileBox) download*(file: str = "box.tar"): ([]char, std::Err) {
	if file == "box.tar" {
		f, err := std::fopen(b.path, "rb")
		if err.code != 0 {
			return {}, err
		}
		d, err := std::freadall(f)
		if err.code != 0 {
			return {}, err
		}
		std::fclose(f)

		return d, {}
	}
	
	if file == "version" {
		sb, err := os::stat(b.path)
		if err.code != 0 {
			return {}, err
		}
		
		return []char(std::itoa(sb.mtime)), {}
	}

	if b.handle._ == null {
		if err := b.open(); err.code != 0 {
			return {}, err
		}
	}

	dat, err := b.handle.read(file)
	if err.code != 0 {
		return {}, err
	}
	
	return dat, {}
}

fn (b: ^FileBox) encode*(): str {
	return sprintf("%s@file://%s", b.name, b.path)
}

type Meta* = struct {
	name: str
	version: str
	author: str
	license: str
	description: str
	readme: str
	source: str
	homepage: str
	dependencies: []Box
	include: []str
	run: str
	runPosix: str
	runWindows: str
	preBuild: str
	postBuild: str
	others: map[str]any
}

fn (m: ^Meta) toJSON*(): str {
	enc := jsonenc::mk()

	enc.startObject()
		enc.putKey("name"); enc.putVal(m.name)
		enc.putKey("version"); enc.putVal(m.version)
		enc.putKey("author"); enc.putVal(m.author)
		enc.putKey("license"); enc.putVal(m.license)
		enc.putKey("description"); enc.putVal(m.description)
		enc.putKey("readme"); enc.putVal(m.readme)
		enc.putKey("dependencies"); enc.startArray()
			for i,v in m.dependencies {
				enc.putVal(v.encode())
			}
		enc.endArray()
			
		enc.putKey("include"); enc.startArray()
			for i,v in m.include {
				enc.putVal(v)
			}
		enc.endArray()

		if len(m.source) > 0 {
			enc.putKey("source"); enc.putVal(m.source)
		}

		if len(m.homepage) > 0 {
			enc.putKey("homepage"); enc.putVal(m.homepage)
		}
			
		if len(m.run) > 0 {
			enc.putKey("run"); enc.putVal(m.run)
		}

		if len(m.runPosix) > 0 {
			enc.putKey("run_posix"); enc.putVal(m.runPosix)
		}

		if len(m.runWindows) > 0 {
			enc.putKey("run_windows"); enc.putVal(m.runWindows)
		}

		if len(m.preBuild) > 0 {
			enc.putKey("pre_build"); enc.putVal(m.preBuild)
		}

		if len(m.postBuild) > 0 {
			enc.putKey("post_build"); enc.putVal(m.postBuild)
		}

		if len(keys(m.others)) > 0 {
			for k,v in m.others {
				if valid(v) {
					enc.putKey(k)
					enc.putVal(v)
				}
			}
		}
	enc.endObject()

	return enc.toStr()
}

fn parseDep*(dep: str): Box {
	if !strings::contains(dep, "@") {
		return HTTPBox{
			name: dep,
			url: serverUrl
		}
	}
	
	sp := strings::split(dep, "@")
	name := sp[0]
	source := sp[1]
	
	if strings::has_prefix(source, "http://") || strings::has_prefix(source, "https://") {
		return HTTPBox{
			name: name,
			url: source
		}
	} else if strings::has_prefix(source, "file://") {
		return FileBox{
			name: name,
			path: strings::trimprefix(source, "file://")
		}
	}

	return null
}

fn getMeta*(path: str): (Meta, std::Err) {
	if !os::isfile(path) {
		return {}, error(.fileNotFound, path)
	}
	
	f, err := std::fopen(path, "rb")
	if err.code != 0 {
		return {}, err
	}

	d, err := std::freadall(f)
	if err.code != 0 {
		return {}, err
	}

	parsed := json::parse(str(d))
	std::fclose(f)
	if errs := ^[]json::Error(parsed); errs != null {
		return {}, error(.json, sprintf("(%s:%d) %s", path, errs[0].lno, errs[0].message))
	}

	r := ^map[str]any(parsed)
	if r == null {
		return {}, error(.json, "invalid top level json object")
	}
	   
	m := Meta{}

	if ^str(r["name"]) != null {
		m.name = str(r["name"])
		r ^= delete(r^, "name")
	} else {
		return {}, error(.jsonKeyNotFound, "name")
	}
	
	if ^str(r["version"]) != null {
		m.version = str(r["version"])
		r ^= delete(r^, "version")
	} else {
		return {}, error(.jsonKeyNotFound, "version")
	}
	
	if ^str(r["author"]) != null {
		m.author = str(r["author"])
		r ^= delete(r^, "author")
	} else {
		return {}, error(.jsonKeyNotFound, "author")
	}

	if ^str(r["license"]) != null {
		m.license = str(r["license"])
		r ^= delete(r^, "license")
	} else {
		return {}, error(.jsonKeyNotFound, "license")
	}

	if ^str(r["description"]) != null {
		m.description = str(r["description"])
		r ^= delete(r^, "description")
	} else {
		return {}, error(.jsonKeyNotFound, "description")
	}

	if ^str(r["readme"]) != null {
		m.readme = str(r["readme"])
		r ^= delete(r^, "readme")
	} else {
		return {}, error(.jsonKeyNotFound, "readme")
	}

	if ^str(r["source"]) != null {
		m.source = str(r["source"])
		r ^= delete(r^, "source")
	}

	if ^str(r["homepage"]) != null {
		m.homepage = str(r["homepage"])
		r ^= delete(r^, "homepage")
	}

	if ^str(r["link"]) != null {
		m.source = str(r["link"])
		m.homepage = str(r["link"])
		printf("Warning: The `link` option has been deprecated in favor of `source` and `homepage`\n")
		r ^= delete(r^, "link")
	}

	if ^[]any(r["dependencies"]) != null {
		m.dependencies = make([]Box, len([]any(r["dependencies"])))
		for i, v in []any(r["dependencies"]) {
			m.dependencies[i] = parseDep(str(v))
			if !valid(m.dependencies[i]) {
				return {}, error(.box, str(v))
			}
		}
		r ^= delete(r^, "dependencies")
	} else {
		return {}, error(.jsonKeyNotFound, "dependencies")
	}

	if ^[]any(r["include"]) != null {
		m.include = []str([]any(r["include"]))
		r ^= delete(r^, "include")
	} else {
		return {}, error(.jsonKeyNotFound, "include")
	}

	if ^str(r["run"]) != null {
		m.run = str(r["run"])
		r ^= delete(r^, "run")
	}
	
	if ^str(r["run_posix"]) != null {
		m.runPosix = str(r["run_posix"])
		r ^= delete(r^, "run_posix")
	}

	if ^str(r["run_windows"]) != null {
		m.runWindows = str(r["run_windows"])
		r ^= delete(r^, "run_windows")
	}

	if ^str(r["pre_build"]) != null {
		m.preBuild = str(r["pre_build"])
		r ^= delete(r^, "pre_build")
	}

	if ^str(r["post_build"]) != null {
		m.postBuild = str(r["post_build"])
		r ^= delete(r^, "post_build")
	}

	m.others = r^

	return m, {}
}

type ApiResp* = struct {
	ok: bool
	status: int
	data: any
	msg: str
}

fn parseResp(resp: http::Response): ApiResp {
	if !resp.ok {
		return {
			ok: false,
			status: -1,
			msg: resp.err
		}
	}
		  
	out := ApiResp{}
	out.status = resp.status
	
	payload := json::parse(str(resp.body))
	if errs := ^[]json::Error(payload); errs != null {
		out.ok = false
		out.status = -2
		out.msg = sprintf("invalid response body (status code: %d)", resp.status)
		if debugMode {
			for _, err in errs {
				out.msg += sprintf("(%d): %s\n", err.lno, err.message)
			}
		}
		return out
	}
	
	if data := ^map[str]any(payload); data != null {
		out.ok = bool(data["ok"])
		if out.ok {
			out.data = data["data"]
		} else {
			out.msg = str(data["msg"])
		}
	} else {
		out.ok = false
		out.msg = "invalid json"
		out.status = -3
	}
	
	return out
}

fn get*(url, endpoint: str, token: str = ""): ApiResp {
	url = sprintf("%s/%s", url, endpoint)
	par := http::GetParams{
		userAgent: "umbox-cli"
	}
		 
	if len(token) > 0 {
		par.headers = append(par.headers, "Authorization: UmBox " + token)
	}

	if debugMode {
		printf("GET %s, %v\n", url, par)
	}

	r := http::get(url, par)

	if debugMode {
		printf("  < %v\n", r)
	}
	
	return parseResp(r)
}

fn post*(data: []char, url, endpoint: str, token: str = ""): ApiResp {
	url = sprintf("%s/%s", url, endpoint)
	par := http::PostParams{
		userAgent: "umbox-cli"
	}
		 
	if len(token) > 0 {
		par.headers = append(par.headers, "Authorization: UmBox " + token)
	}
	
	if debugMode {
		printf("POST %s, %v\n", url, par)
		printf("======DATA BEGIN======\n")
		printf("%v\n", data)
		printf("======DATA END========\n")
	}

	r := http::post(url, data, par)

	if debugMode {
		printf("  < %v\n", r)
	}

	return parseResp(r)
}
