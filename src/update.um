
import (
	"../umbox/filepath/filepath.um"
	"../umbox/strings/strings.um"
	"../umbox/os/os.um"
	"std.um"

	"build.um"
	"common.um"
)

fn git_init()
fn git_strerror(): str
fn git_updaterepo(dep, ref, dir: str): int
fn fetchFor(deps: []common::Dep): std::Err

var fetched, built: map[str]bool

fn link(target, link: str): std::Err {
	printf("link %s -> %s\n", link, target)

	os::mkdirp(filepath::dir(link))
	err := os::link(target, link)
	if err.code != 0 && os::getPlatform() == os::Platform.windows {
		std::system("mklink /j " + target + " " + link)
		return {}
	}

	if err.code == 17 {
		return {}
	}
	return err
}

fn fetch(d: common::Dep): std::Err {
	if fetched[d.full] {
		return {}
	}

	os::mkdirp(d.srcPath)
	printf("Fetch %s\n", d.full)
	if ec := git_updaterepo(d.url, d.ref, d.srcPath); ec != 0 {
		return common::error(.gitError, git_strerror())
	}

	fetched[d.full] = true

	meta, err := common::getMeta(filepath::join(d.srcPath, "box.json"))
	if err.code != 0 {
		return err
	}

	return fetchFor(meta.deps)
}

fn fetchFor(deps: []common::Dep): std::Err {
	for i,d in deps {
		if err := fetch(d); err.code != 0 {
			return err
		}
	}

	return {}
}

fn build(d: common::Dep): std::Err {
	if built[d.full] {
		return {}
	}

	cwd, err := os::getCwd()
	if err.code != 0 {
		return err
	}

	err = os::chdir(d.srcPath)
	if err.code != 0 {
		return err
	}

	err = build::run({
		outDir: filepath::join(cwd, d.dstPath)
	})
	if err.code != 0 {
		return err
	}

	err = os::chdir(cwd)
	if err.code != 0 {
		return err
	}

	built[d.full] = true

	return {}
}

fn buildFor(deps: []common::Dep): std::Err {
	for i,d in deps {
		meta, err := common::getMeta(filepath::join(d.srcPath, "box.json"))
		if err.code != 0 {
			return err
		}

		if err := buildFor(meta.deps); err.code != 0 {
			return err
		}

		for j,cd in meta.deps {
			if !cd.buildOnly {
				continue
			}

			err := link(
				filepath::join("..", "..", "gitdst", cd.canonical),
				filepath::join(d.srcPath, "umbox", cd.name))
			if err.code != 0 {
				return err
			}
		}

		if err := build(d); err.code != 0 {
			return err
		}

		for j,cd in meta.deps {
			if cd.buildOnly {
				continue
			}

			err := link(
				filepath::join("..", "..", cd.canonical),
				filepath::join(d.dstPath, "umbox", cd.name))
			if err.code != 0 {
				return err
			}
		}
	}

	return {}
}

fn run*(): std::Err {
	git_init()
		
	meta, err := common::getMeta("box.json")
	if err.code != 0 {
		return err
	}

	os::mkdirp("umbox")

	err = fetchFor(meta.deps)
	if err.code != 0 {
		return err
	}

	err = buildFor(meta.deps)
	if err.code != 0 {
		return err
	}

	for i,d in meta.deps {
		err = link(
			filepath::join("gitdst", d.canonical),
			filepath::join("umbox", d.name))
		if err.code != 0 {
			return err
		}
	}
	
	return {}
}
