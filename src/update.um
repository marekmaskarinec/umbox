
import (
	"../umbox/filepath/filepath.um"
	"../umbox/strings/strings.um"
	"../umbox/os/os.um"
	"std.um"

	"build.um"
	"common.um"
)

fn git_init()
fn git_strerror(): str
fn git_updaterepo(dep, ref, dir: str): int
fn fetchFor(deps: []common::Dep): std::Err

var fetched: map[str]bool

fn fetch(d: common::Dep): std::Err {
	if fetched[d.full] {
		return {}
	}

	os::mkdirp(d.srcPath)
	printf("Fetch %s\n", d.full)
	if ec := git_updaterepo(d.url, d.ref, d.srcPath); ec != 0 {
		return common::error(.gitError, git_strerror())
	}

	fetched[d.full] = true

	meta, err := common::getMeta(filepath::join(d.srcPath, "box.json"))
	if err.code != 0 {
		return err
	}

	return fetchFor(meta.deps)
}

fn fetchFor(deps: []common::Dep): std::Err {
	for i,d in deps {
		if err := fetch(d); err.code != 0 {
			return err
		}
	}

	return {}
}

fn run*(): std::Err {
	git_init()
		
	meta, err := common::getMeta("box.json")
	if err.code != 0 {
		return err
	}

	os::mkdirp("umbox")

	err = fetchFor(meta.deps)
	if err.code != 0 {
		return err
	}
	
	return {}
}
