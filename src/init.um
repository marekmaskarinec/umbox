
import (
	"common.um"
	"update.um"
	"std.um"
        
	"../umbox/tar/tar.um"
	"../umbox/filepath/filepath.um"
	"../umbox/io/io.um"
	"../umbox/os/os.um"
)

fn downloadPreset(box: common.Box): (common.Meta, std.Err) {
	if !box.exists("init.tar") {
		return {}, std.error(254, sprintf("box '%s' doesn't have an init preset", box.getName()))
	}

	dat, err := box.download("init.tar")
	if err.code != 0{
		return {}, err
	}

	tf, err := tar.openBytes([]uint8(dat))
	if err.code != 0 {
		return {}, err
	}

	err = tf.extract(".")
	if err.code != 0 {
		return {}, err
	}

	m, err := common.getMeta("box.json")
	if err.code != 0 {
		return m, err
	}
	return m, {}
}

fn run*(url: str, argi: int): std.Err {
	if std.argc() < 2 || std.argc() > 3 {
		fprintf(std.stderr(), "Usage: umbox init [<preset>]\n")
		return {}
	}
	
	if ls, err := os.listdir("."); len(ls) > 2 {
		return std.error(1, "Refusing to init a box in an non-empty directory")
	}

	m := common.Meta{
		version: "v0.1.0",
		readme: "README.md"
	}

	if std.argc() == 3 {
		preset := common.parseDep(std.argv(argi))
		if !preset.exists() {
			fprintf(std.stderr(), "Box '%s' doesn't exist\n", preset)
			return {}
		}

		var err: std.Err
		m, err = downloadPreset(preset)
		if err.code != 0 {
			return err
		}
	}

	name, err := os.getCwd()
	m.name = filepath.file(name)

	f := std.fopen("box.json", "w").item0
	fprintf(f, "%s", m.toJSON())
	std.fclose(f)

	return update.run(url, std.argc())
}
