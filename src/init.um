
import (
	"common.um"
	"update.um"
	"std.um"
        
	"../umbox/tar/tar.um"
	"../umbox/filepath/filepath.um"
	"../umbox/io/io.um"
	"../umbox/os/os.um"
)

fn downloadPreset(packageName: str): (common.Meta, str) {
	dat := common.download(packageName, "init.tar")

	tf, err := tar.openBytes(dat)
	if err != 0 {
		return {}, tar.strerror(err)
	}

	err = tf.extract(".")
	if err != 0 {
		return {}, tar.strerror(err)
	}

	ok, m := common.getMeta("box.json")
	if !ok {
		return m, "box.json is invalid"
	}
	return m, ""
}

fn run*(url: str, argi: int) {
	if argi != 2 {
		printf("Usage: umbox init [<preset>]\n")
		return
	}

	if ls, err := os.listdir("."); len(ls) > 2 {
		printf("%v\n", ls)
		printf("Refusing to init a box in a non-empty directory\n")
		return
	}

	m := common.Meta{
		version: "v0.1.0",
		readme: "README.md"
	}
	if argi == std.argc() - 1 {
		preset := std.argv(argi)
		if !common.exists(preset) {
			printf("%s doesn't exist\n", preset)
			return
		}

		var err: str
		m, err = downloadPreset(preset)
		if len(err) != 0 {
			printf("Could not download preset: %s\n", err)
			return
		}
	}

	name, err := os.getCwd()
	m.name = filepath.file(name)

	f := std.fopen("box.json", "w")
	fprintf(f, "%s", m.toJSON())
	std.fclose(f)

	update.run(url, std.argc() - 1)
}
