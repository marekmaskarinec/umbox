
import (
	"common.um"
	"update.um"
	"std.um"
        
	"../umbox/tar/tar.um"
	"../umbox/filepath/filepath.um"
	"../umbox/os/os.um"
)

fn downloadPreset(box: common::Box): (common::Meta, std::Err) {
	if !box.exists("init.tar") {
		return {}, common::error(.fileNotFound, "init.tar")
	}

	dat, err := box.download("init.tar")
	if err.code != 0{
		return {}, err
	}

	tf, err := tar::openBytes([]uint8(dat))
	if err.code != 0 {
		return {}, err
	}

	err = tf.extract(".")
	if err.code != 0 {
		return {}, err
	}

	m, err := common::getMeta("box.json")
	if err.code != 0 {
		return m, err
	}
	return m, {}
}

fn run*(presetStr: str): std::Err {
	if ls, err := os::listdir("."); len(ls) > 2 {
		return common::error(.dirNotEmpty)
	}

	m := common::Meta{
		version: "v0.1.0",
		readme: "README.md"
	}

	if presetStr != "" {
		preset := common::parseDep(presetStr)
		if !preset.exists() {
			fprintf(std::stderr(), "Box '%s' doesn't exist\n", preset.encode())
			return {}
		}

		var err: std::Err
		m, err = downloadPreset(preset)
		if err.code != 0 {
			return err
		}
	}

	name, err := os::getCwd()
	m.name = filepath::file(name)

	f := std::fopen("box.json", "w").item0
	fprintf(f, "%s", m.toJSON())
	std::fclose(f)

	return update::run()
}
